"""
Created on Thu Mar 14 16:09:32 2019

@author: SergioGramer
Instructor: Dr. Olac Fuentes
T.A.'s: Anindita Nath, Malileh Zargaran
Objective: Use B-Trees to implement several steps outlined in Lab 4:
    Compute the Height of the tree
    Extracted the items in the B-Tree into a sorted list
    Return the minimum element in the tree at a given depth d
    Return the maximum element in the tree at a given depth d
    Return the number of nodes at a given depth d
    Print all of the items in the tree at given depth d
    Return the number of nodes in the tree that are full
    Return the number of leaves in the tree that are full
    
"""

# Code to implement a B-tree 
# Programmed by Olac Fuentes
# Last modified February 28, 2019

class BTree(object):
    # Constructor
    def __init__(self,item=[],child=[],isLeaf=True,max_items=5):  
        self.item = item
        self.child = child 
        self.isLeaf = isLeaf
        if max_items <3: #max_items must be odd and greater or equal to 3
            max_items = 3
        if max_items%2 == 0: #max_items must be odd and greater or equal to 3
            max_items +=1
        self.max_items = max_items

def FindChild(T,k):
    # Determines value of c, such that k must be in subtree T.child[c], if k is in the BTree    
    for i in range(len(T.item)):
        if k < T.item[i]:
            return i
    return len(T.item)
             
def InsertInternal(T,i):
    # T cannot be Full
    if T.isLeaf:
        InsertLeaf(T,i)
    else:
        k = FindChild(T,i)   
        if IsFull(T.child[k]):
            m, l, r = Split(T.child[k])
            T.item.insert(k,m) 
            T.child[k] = l
            T.child.insert(k+1,r) 
            k = FindChild(T,i)  
        InsertInternal(T.child[k],i)   
            
def Split(T):
    #print('Splitting')
    #PrintNode(T)
    mid = T.max_items//2
    if T.isLeaf:
        leftChild = BTree(T.item[:mid]) 
        rightChild = BTree(T.item[mid+1:]) 
    else:
        leftChild = BTree(T.item[:mid],T.child[:mid+1],T.isLeaf) 
        rightChild = BTree(T.item[mid+1:],T.child[mid+1:],T.isLeaf) 
    return T.item[mid], leftChild,  rightChild   
      
def InsertLeaf(T,i):
    T.item.append(i)  
    T.item.sort()

def IsFull(T):
    return len(T.item) >= T.max_items

def Insert(T,i):
    if not IsFull(T):
        InsertInternal(T,i)
    else:
        m, l, r = Split(T)
        T.item =[m]
        T.child = [l,r]
        T.isLeaf = False
        k = FindChild(T,i)  
        InsertInternal(T.child[k],i)   
        
        
def height(T):
    if T.isLeaf:
        return 0
    return 1 + height(T.child[0])
        
        
def Search(T,k):
    # Returns node where k is, or None if k is not in the tree
    if k in T.item:
        return T
    if T.isLeaf:
        return None
    return Search(T.child[FindChild(T,k)],k)
                  
def Print(T):
    # Prints items in tree in ascending order
    if T.isLeaf:
        for t in T.item:
            print(t,end=' ')
    else:
        for i in range(len(T.item)):
            Print(T.child[i])
            print(T.item[i],end=' ')
        Print(T.child[len(T.item)])    
 
def PrintD(T,space):
    # Prints items and structure of B-tree
    if T.isLeaf:
        for i in range(len(T.item)-1,-1,-1):
            A = T.item[i]
            print(space,T.item[i])
    else:
        PrintD(T.child[len(T.item)],space+'   ')  
        for i in range(len(T.item)-1,-1,-1):
            print(space,T.item[i])
            PrintD(T.child[i],space+'   ')
    
def SearchAndPrint(T,k):
    node = Search(T,k)
    if node is None:
        print(k,'not found')
        
    else:
        print(k,'found',end=' ')
        print('node contents:',node.item)
        
def ExtractSort(T, sort) :
    sort = []
    if T.isLeaf:
         return T.item
     
    for i in range(len(T.child)) :
           sort += ExtractSort(T.child[i],sort)
           if i < len(T.item):
               sort.append(T.item[i])
               
    return sort

def MinElementAtGivenDepth(T, d) :
    if d is 0 :
        return T.item[0]
    
    if T.isLeaf and d != 0 :
        return -1
    
    return MinElementAtGivenDepth(T.child[0], d-1)

def MEAGD(T, m) : #Max Element At Given Depth
    if m is 0 :
        return T.item[(len(T.item)-1)]
    
    if T.isLeaf and m != 0:
        return -1
    
    return MEAGD(T.child[len(T.item)], m - 1)

def NodesAtDepth(T, n) :
    if n is 0 :
        return len(T.item)
    
    if n > height(T) :
        return -1
    
    c = 0
    for j in range(len(T.child)) :
        c += NodesAtDepth(T.child[j], n - 1)
        
    return c

def ElementsAtDepth(T, d) :
    if d is 0 :
        for i in range(len(T.item)) :
            print(T.item[i])
            i += 1
            
    if T.isLeaf and d != 0 :
        return print('Not found')
    
    for j in range(len(T.child)) :
        ElementsAtDepth(T.child[j], d-1)
        j += 1
        
def FullNodes(T) : 
    c = 0
    if T.max_items == len(T.item) :
        c += 1
        return c
    
    if T.isLeaf :
        return c
    
    else :
        for i in range(len(T.child)) :
            c += FullNodes(T.child[i])
            
        return c

def FullLeaves(T) :
    if T.isLeaf : 
        
        if len(T.item) == T.max_items :
            return 1
        
        else :
            return 0
        
    count = 0       
    for i in range(len(T.child)):
        count+= FullLeaves(T.child[i])  
        
    return count        
    
    
A = []    
L = [30, 50, 10, 20, 60, 70, 100, 40, 90, 80, 110, 120, 1, 11 , 3, 4, 5, 105, 115, 200, 2, 45, 6]
T = BTree()    
for i in L:
    print('Inserting',i)
    Insert(T,i)
    PrintD(T,'') 
    #Print(T)
    print('\n####################################')
    
#SearchAndPrint(T,60)
#SearchAndPrint(T,200)
#SearchAndPrint(T,25)
#SearchAndPrint(T,20)
#SearchAndPrint(T,50)
#SearchAndPrint(T,10)
print('Printing # Full Leaves:')
print(FullLeaves(T))

print('Printing # of Full Nodes : ')
nodes = FullNodes(T)
print(nodes)

print('Printing elements at depth: ')
ElementsAtDepth(T, 2)

n = NodesAtDepth(T, 3)
print('Number of nodes at depth: ', n)

m = MEAGD(T, 1)
print('Printing Max Element at Given Depth: ', m)
print(m)

d = MinElementAtGivenDepth(T, 1)
print('Printing Min Element at Given Depth: ', d)

F = ExtractSort(T, A)
print('Printing sorted list: ')
print(F)

print('Printing height: ', height(T))
